<?php

/**
 * Implements hook_menu().
 */
function os_stats_menu() {
  $items = array();

  $items['api/v1/stats'] = array(
    'title' => 'Stats',
    'page callback' => 'os_stats_json',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for os_settings_form.
 *
 * Allows admins to set which sitewide stats are visible.
 */
function os_stats_form_os_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['os_stats'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sitewide Statistics'),
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['os_stats']['os_stats_enabled'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled stats'),
  	'#weight' => 0,
    '#options' => drupal_map_assoc(array('filesize', 'users', 'websites', 'posts', 'publications', 'files'), 'ucfirst'),
    '#default_value' => variable_get('os_stats_enabled', ''),
    '#description' => t('Enables specific statistics to visitors on the <a href="/stats">Stats page</a>.'),
  );
}

/**
 * Implements hook_block_info().
 */
function os_stats_block_info() {
  $blocks['os_stats'] = array(
    'info' => t('OpenScholar Stats'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function os_stats_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'os_stats':
      $block['title'] = t('OpenScholar Stats');
      $block['content'] = os_stats_content();
      break;
  }

  return $block;
}

/**
 * Block content callback; returns <dl> definition list HTML element.
 *
 */
function os_stats_content() {
  $items = array();

  //check cache
  if ($cache = cache_get('os_stats_data')) {
    if ($cache->expire < time()) {
      // Clears expired data, but uses it for this run.
      cache_clear_all('os_stats_data', 'cache');
    }
    $items = unserialize($cache->data);
  }
  else {
    $queries = _os_stats_queries();
    $enabled = variable_get('os_stats_enabled', FALSE);
    foreach ($queries as $query => $info) {
      if (!isset($enabled[$query]) || !$enabled[$query]) {
        continue;
      }
      // Runs query, handling arguments if present.
      if ((!empty($info['query_args'])) && (!empty($info['query_args_type']))) {
        $type = $info['query_args_type'];
        $queryArray = $info['query_args'];
        $result = db_query($info['query'], array($type => $queryArray))->fetchField();
      }
      else {
        $result = db_query($info['query'])->fetchField();
      }
      if ($result) {
        // Applies optional formatting callback.
        if (isset($info['callback']) && function_exists($info['callback'])) {
          $result = $info['callback']($result);
        }

        $items[] = array('term' => $info['title'], 'definition' => $result);
      }
    }
    cache_set('os_stats_data', serialize($items), 'cache', time() + variable_get('os_stats_cache_expiration', 24 * 3600));
  }

  return _theme_os_stats_item_dt($items);
}

/**
 * Page callback; outputs JSON object containing all statistics.
 */
function os_stats_json() {
  $output = array();
  $output['item'] = array();

  //check cache
  if ($cache = cache_get('os_stats_json')) {
    if ($cache->expire < time()) {
      // Clears expired data, but uses it for this run.
      cache_clear_all('os_stats_json', 'cache');
    }
    $output = $cache->data;
  }
  else {
    $queries = _os_stats_queries();
    foreach ($queries as $query => $info) {
      // Runs query, handling arguments if present.
      if ((!empty($info['query_args'])) && (!empty($info['query_args_type']))) {
        $type = $info['query_args_type'];
        $queryArray = $info['query_args'];
        $result = db_query($info['query'], array($type => $queryArray))->fetchField();
      }
      else {
        $result = db_query($info['query'])->fetchField();
      }
      if ($result) {
        // Applies optional formatting callback.
        if (isset($info['callback']) && function_exists($info['callback'])) {
          $result = $info['callback']($result);
        }

        $output['item'][] = array('value' => $result, 'text' => $info['title']);
      }
    }

    cache_set('os_stats_json', $output, 'cache', time() + variable_get('os_stats_cache_expiration', 24 * 3600));
  }

  // Outputs just the JSON data, then skips normal page rendering.
  echo json_encode($output);
  return NULL;
}

/**
 * Returns an indexed array containing all possible queries to run.
 *
 */
function _os_stats_queries() {
  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));

  $queries = array();

  $queries['filesize'] = array(
    'title' => t('Total uploaded'),
    'description' => t('Size of all files uploaded by users'),
    'query' => 'SELECT SUM(filesize) FROM {file_managed}',
    'callback' => 'format_size',
    'weight' => -10,
  );
  $queries['users'] = array(
    'title' => t('Users'),
    'description' => t('User accounts'),
    'query' => 'SELECT COUNT(uid) FROM {users}',
    'weight' => -10,
  );
  $queries['websites'] = array(
    'title' => t('Websites'),
    'description' => t('Virtual sites in this OS installation'),
    'query' => 'SELECT COUNT(nid) FROM {node} WHERE type IN (:group_types) ',
    'query_args' => $group_types,
    'query_args_type' => ':group_types',
    'weight' => 0,
  );
  $queries['posts'] = array(
    'title' => t('Posts'),
    'description' => t('Drupal nodes'),
    'query' => 'SELECT COUNT(nid) FROM {node}',
    'weight' => 10,
  );
  $queries['publications'] = array(
    'title' => t('Publications'),
    'description' => t('Biblio publications'),
    'query' => 'SELECT COUNT(nid) FROM {node} WHERE type=\'biblio\'',
    'weight' => 20,
  );
  $queries['files'] = array(
    'title' => t('Uploaded files'),
    'description' => t('Files uploaded by users'),
    'query' => 'SELECT COUNT(fid) FROM {file_managed}',
    'weight' => 30,
  );

  return $queries;
}

/**
 * Returns <dl> definition list from an associative array
 *
 * @param array $definitions
 *
 * @return string $output
 */
function _theme_os_stats_item_dt($items) {
  $output = '<dl>';
  foreach ($items as $item) {
    $output .= '<dt>' . $item['term'] . ':</dt>';
    $output .= '<dd>' . $item['definition'] . '</dd>';
  }
  $output .= '</dl>';

  return $output;
}